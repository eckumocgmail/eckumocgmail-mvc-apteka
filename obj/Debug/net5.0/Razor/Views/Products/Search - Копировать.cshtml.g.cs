#pragma checksum "D:\NetProjects\Mvc_Apteka\Views\Products\Search - Копировать.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "28f330ad7a4ad32d474f3c1150f3392c08a72f7e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Products_Search___Копировать), @"mvc.1.0.view", @"/Views/Products/Search - Копировать.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\NetProjects\Mvc_Apteka\Views\_ViewImports.cshtml"
using Mvc_Apteka;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\NetProjects\Mvc_Apteka\Views\_ViewImports.cshtml"
using Mvc_Apteka.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"28f330ad7a4ad32d474f3c1150f3392c08a72f7e", @"/Views/Products/Search - Копировать.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3409a79fc3eba7cbb335e235f9af3aefb12acb32", @"/Views/_ViewImports.cshtml")]
    public class Views_Products_Search___Копировать : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script>
    function $clearNode( searchStatusSlot ){
        try{
            for(let i=(searchStatusSlot.childNodes.length-1); i>=0; i--){
                searchStatusSlot.removeChild(searchStatusSlot.childNodes[i]);   
            }
        }catch(e){
            alert($clearNode+' error '+e);
        }
            
    }
</script>

 

<!-- Макет страницы поиска продукции -->
<div id=""layoutPane""></div>
<script>
    function $contentLayout( container ){
        const ctrl = {
            $clear: function(){
                if( container.id == '' )
                    throw new Error('Не установлен атрибут id у контейнера: '+container.outerHTML);
                $clearNode(container);
                container.innerHTML = `
                    <div class=""container-fluid"">
                        <div class=""row"">
                            <div class=""col-12"" id=""`+container.id+`TopSlot"">

                            </div>
                        </div>
                    ");
            WriteLiteral(@"    <div class=""row"">
                            <div class=""col-4"" id=""`+container.id+`LeftSlot""></div>
                            <div class=""col-8"" id=""`+container.id+`ViewSlot""></div>
                        </div>
                        <div class=""row"">
                            <div class=""col-12"" id=""`+container.id+`BottomSlot""></div>
                        </div>
                    </div>
                `;
            },
            $top: function( top ){
                const topId = container.id+""TopSlot"";
                try{
                    const topNode = document.getElementById(topId);
                    $clearNode(topNode);
                    topNode.appendChild(top);
                }catch(e){
                    alert('$contentLayout.$top(..) ошибка '+e);
                }
            },
            $bottom: function( bottom ){
                const bottomId = container.id+""BottomSlot"";
                try{
                    const bottomNode = document.");
            WriteLiteral(@"getElementById(bottomId);
                    $clearNode(bottomNode);
                    bottomNode.appendChild(bottom);
                }catch(e){
                    alert('$contentLayout.$bottom(..) ошибка '+e);
                }
            },
            $left: function( left ){
                const leftId = container.id+""LeftSlot"";
                try{
                    const leftNode = document.getElementById(leftId);
                    $clearNode(leftNode);
                    leftNode.appendChild(left);
                }catch(e){
                    alert('$contentLayout.$left(..) ошибка '+e);
                }
            },
            $view: function( view ){
                const viewId = container.id+""ViewSlot"";
                try{
                    const viewNode = document.getElementById(viewId);
                    $clearNode(viewNode);
                    viewNode.appendChild(view);
                }catch(e){
                    alert('$contentLayout.$view(..)");
            WriteLiteral(@" ошибка '+e);
                }
            },
        }
        try{
            ctrl.$clear();
        }catch(e){
            alert('$contentLayout(..) ошибка '+e);
        }
        return ctrl;
    }
    const contentLayoutCtrl = $contentLayout( layoutPane );
</script>


<!-- поле ввода -->
<script>
    function $input(){
        const pnode = document.createElement('div');
        const ctrl = {
            $content( label, type, name, value, placeholder, oninput ){
                return `
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"">`+label+`</span>
                        </div>
                        <input oninput=""`+oninput+`"" name=""`+name+`"" type=""`+type+`"" class=""form-control"" placeholder=""`+placeholder+`"" />
                    </div>`;
            },
            $update( label, type, name, value, placeholder, oninput ){
                const c");
            WriteLiteral(@"ontent = ctrl.$content.apply(this,arguments);
                pnode.innerHTML = content;
            },
            $layout( pcontainer )
            {
                pcontainer.appendChild(pnode);
            }
        };

        return ctrl;
    }
</script>



<!-- поле выбора выпадающим списком -->
<script>
    function $inputSelect( label, name, value, options, oninput ){
        const pnode = document.createElement('div');
        const ctrl = {
            $content( label, name, value, options, oninput ){
                let optionsContent = '';
                for(let i=0; i<options.length; i++ ){
                    optionsContent += '<option>'+options[i]+'</option>';
                }
                return `
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"">`+label+`</span>
                        </div>
                        <select oninput=""`+oninp");
            WriteLiteral(@"ut+`"" value=""`+value+`"" name=""`+name+`"" class=""form-control"">
                        `+optionsContent+`
                        </select>
                    </div>`;
            },
            $update( label, name, value, options, oninput ){
                const content = ctrl.$content.apply(this,arguments);
                pnode.innerHTML = content;
            },
            $layout( pcontainer )
            {
                pcontainer.appendChild(pnode);
            }
        };
        return ctrl;
    }
</script>




<!-- ввод диапазона -->
<script>
    function $inputRange( label, type, name, minValue, maxValue, placeholder, oninput ){
        const pnode = document.createElement('div');
        const ctrl = {
            $getMinValue(){
                try{
                    const pinput=document.getElementById(name+'Min');
                    if(!pinput)
                        throw new Error('Не найден элемент с id='+name+'Min');
                    return pinput");
            WriteLiteral(@".value;
                }catch(e){
                    alert('$inputRange(..).$getMinValue(..) Ошибка '+e);
                }
            },
            $getMaxValue(){
                try{
                    const pinput = document.getElementById(name+'Max');
                    if(!pinput)
                        throw new Error('Не найден элемент с id='+name+'Max');
                    return pinput.value;
                }catch(e){
                    alert('$inputRange(..).$getMinValue(..) Ошибка '+e);
                }
            },
            $getRange(){
                return '['+ctrl.$getMinValue()+','+ctrl.$getMaxValue()+']';
            },
            $content( label, type, name, minValue, maxValue, placeholder, oninput ){
                return `
                    <div class=""input-group d-flex flex-row flex-nowrap"" style=""width: 100%;"">
                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"" style=""width: 80p");
            WriteLiteral(@"x;"">`+label+`</span>
                        </div>
                        <input id=""`+name+`Min"" name=""`+name+`Min"" type=""`+type+`"" value=""`+minValue+`"" class=""form-control"" style=""width: 100%;"" />
                        <input id=""`+name+`Max"" name=""`+name+`Max"" type=""`+type+`"" value=""`+maxValue+`"" class=""form-control"" style=""width: 100%;"" />
                    </div>`;
            },
            $update( label, type, name, value, placeholder, oninput ){
                const content = ctrl.$content.apply(this,arguments);
                pnode.innerHTML = content;
            },
            $layout( pcontainer )
            {
                pcontainer.appendChild(pnode);
            } 
        }
        ctrl.$update(label, type, name, minValue, maxValue, placeholder, oninput);
        return ctrl;
    }
</script>


<!-- заголовок -->
<script>
    function $title(text){
        const pnode = document.createElement('span');
        pnode.innerHTML = text;
        pnode.style.fon");
            WriteLiteral(@"tSize = '22px';
        return pnode;
    }
</script>

<!-- Форма настройки фильтров поиска -->
<script>
    function $searchFilter(){
        const pnode = document.createElement('div');

        

        const ctrl = {
            $init(){
                pnode.appendChild($title('Параметры поиска'));

                const priceRangeCtrl = ctrl.priceRangeCtrl = $inputRange('Цена',     'number', 'price', 0, 100, 'цена', function validate(){} );                
                const countRangeCtrl = ctrl.countRangeCtrl = $inputRange('Кол-во',   'number', 'count', 0, 100, 'кол-во', function validate(){} );        

                priceRangeCtrl.$layout(pnode);        
                countRangeCtrl.$layout(pnode);
            },

            $get(){
                if( !ctrl.priceRangeCtrl )
                    throw new Error('ctrl.priceRangeCtrl не определён');
                if( !ctrl.priceRangeCtrl.$getMinValue )
                    throw new Error('ctrl.priceRangeCtrl.$getMi");
            WriteLiteral(@"nValue не определён');
                return `price in ${ctrl.priceRangeCtrl.$getRange()} && count in ${ctrl.countRangeCtrl.$getRange()}`;
                //return ctrl.priceRangeCtrl.$getMinValue() + ',' + ctrl.priceRangeCtrl.$getMaxValue();
            }
        };
        ctrl.pnode = pnode;

        ctrl.$init();

        return ctrl;
    }
    const searchFilterForm = $searchFilter();
    contentLayoutCtrl.$left(searchFilterForm.pnode);
    console.log( searchFilterForm.$get()  );
</script>







<!-- статус поиска -->
<div id=""searchStatusPane"">
    Ожидание
</div>
<script>
    contentLayoutCtrl.$bottom(searchStatusPane);
</script>



<!-- карточка -->
<script>
    function $card( title, subtitle, text, ahref, atext ){
        const cardNode = document.createElement('div');  
        cardNode.innerHTML = `
            <div class=""card"">
                <h5 class=""card-header"">`+title+`</h5>
                <div class=""card-body"">
                    <h5 class=""c");
            WriteLiteral(@"ard-title"">`+subtitle+`</h5>
                    <p class=""card-text"">`+text+`</p>
                    <a href=""#`+ahref+`"" class=""btn btn-primary"">`+atext+`</a>
                </div>
            </div>
        `;
        return cardNode;
    }
</script>


<!-- результат поиска -->
<div id=""searchResultsPane"">        
</div>
<script>
    function $searchResults( ){
        const pnode = document.createElement('div');
        const ctrl = {
            $clear: function(){
                $clearNode(pnode);
            },
            $update: function( searchResults ){
                try{
                    if( !(searchResults instanceof Array) )
                        throw new Error('Функция обновления результатов поиска должна принимать аргумент типа массив');
                    ctrl.$clear();
                    if( searchResults.length==0 ){
                        pnode.innerHTML = `
                            <div class=""alert alert-danger"">Нет результатов</div>`;
     ");
            WriteLiteral(@"               }else{
                        
                        for(let i=0; i<searchResults.length; i++){
                            const result = searchResults[i];
                            const resultPane = $card(result.title, result.subtitle, result.text, result.ahref, result.atext );
                            pnode.appendChild(resultPane);
                        }
                    }
                        

                }catch(e){
                    alert('$searchResults.$update( ... ) ошибка '+e);
                }
            },
            $layout( pcontainer ){
                pcontainer.appendChild(pnode);
            }
        };
        ctrl.pnode = pnode;
        ctrl.$update([]);
        return ctrl;
    }
    const searchResults = $searchResults();
    searchResultsPane.appendChild( searchResults.pnode );
    contentLayoutCtrl.$view(searchResultsPane);
</script>







<!-- поле выбора выпадающим списком -->
<script>
    function $inputS");
            WriteLiteral(@"earch( label, name, value, options, oninput ){
        const pnode = document.createElement('div');
        const ctrl = {
            $options: function(){
                try{
                    const pnode = document.getElementById(name+""Options"");
                    $clearNode(pnode);
                    let optionsContent = '';
                    for(let i=0; i<options.length; i++ ){
                        optionsContent += '<option>'+options[i]+'</option>';
                    }
                    pnode.innerHTML = optionsContent;
                }catch(e){
                    alert('$inputSearch().$options(...) Ошибка '+e);
                }
            },
            $content( label, name, value, options, oninput ){
                let optionsContent = '';
                for(let i=0; i<options.length; i++ ){
                    optionsContent += '<option>'+options[i]+'</option>';
                }
                return `
                    <div class=""input-group mb-3"">
");
            WriteLiteral(@"                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"">`+label+`</span>
                        </div>
                        <input list=""`+name+`Options"" type=""text"" oninput=""`+oninput+`"" value=""`+value+`"" name=""`+name+`"" class=""form-control""/>
                        <datalist id=""`+name+`Options"">`+optionsContent+`</datalist>
                    </div>`;
            },
            $update( label, name, value, options, oninput ){
                const content = ctrl.$content.apply(this,arguments);
                pnode.innerHTML = content;
            },
            $layout( pcontainer )
            {
                pcontainer.appendChild(pnode);
            }
        };
        ctrl.$update( label, name, value, options, oninput );
        ctrl.pnode = pnode;
        return ctrl;
    }
</script>



<script>
  
    function $http(  ){
        const ctrl = {

            $get( uri, params ){
                
      ");
            WriteLiteral(@"          return new Promise((resolve,reject)=>{

                    const paramsStr = '';
                    if( params ){
                        const names = Object.getOwnPropertyNames(params);
                        for(let i=0; i<names.length; i++){
                            const key = names[i];
                            const value = encodeURI(params[names[i]]);
                            if(paramsStr.length==0){
                                paramsStr += '?'+key+'='+value;
                            }else{
                                paramsStr += '&'+key+'='+value;
                            }
                        }
                    }


                    const request = new XMLHttpRequest();
                    const url = location.origin+uri+paramsStr;
                    console.log(url);
                    request.addEventListener('readystatechange',function(){
                        switch(request.readyState){
                            case 4:
  ");
            WriteLiteral(@"                              resolve(request.status, request.responseText);
                                break;
                            default:
                                console.log(request.readyState, request.url);
                                break;
                        }
                    });
                    request.open('GET', url, true);
                    request.send(null);                     
                });
            }
            
        };        
        return ctrl;
    }
</script>

<!-- строка поиска -->
<div id=""searchQueryInput"" >
     
</div>

<script>
    function $global(){
        if( typeof(window['ctrl'])=='undefined'  ){
            return window['ctrl']={                
            };
        }else{
             return window['ctrl'];
        }
    };


</script>
<script>
    function $searchPage( uri ){
        const ctrl = {
            
            $global(){
                if( typeof(window['ctrl'])=='unde");
            WriteLiteral(@"fined'  ){
                    return window['ctrl']={                
                    };
                }else{
                     return window['ctrl'];
                }
            },

            $init(){

                const inputSearchCtrl = $inputSearch('поиск','searchInput','',['text1','text2'], 'console.log($global().$oninput({ name: event.target.name, value: event.target.value })); event.preventDefault();');
                searchQueryInput.appendChild($title('Поиск'));
                inputSearchCtrl.$layout(searchQueryInput);
                contentLayoutCtrl.$top(searchQueryInput);
            },

            $onerror( message ){
                alert(message);
            },
            
            $oninput( message ){
                if( !message )
                    throw new Error('Аргумент message фукнции oninput(..) не определён');
                if( !message.name )
                    throw new Error('Аргумент message.name фукнции oninput(..) не определё");
            WriteLiteral(@"н');
                if( !message.value )
                    throw new Error('Аргумент message.value фукнции oninput(..) не определён');                
                switch(message.name){
                    case 'searchInput':
                        $http().$get(`${uri}/OnInput`,message).then(
                            (status, text)=>{
                                const response = JSON.parse(response);

                            }, 
                            (err)=>{
                                ctrl.$onerror('Ошибка при обработки события oninput: '+err);
                            }
                        );
                        message.value
                        message.value
                        break;
                }
                console.log(message.name+'='+message.value);
                return message;
            }
        };
        
        Object.assign(ctrl.$global(), ctrl);
        ctrl.$init();
    }
</script>
<script>
    const sear");
            WriteLiteral("chPage =$searchPage(\'/Products\');\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
