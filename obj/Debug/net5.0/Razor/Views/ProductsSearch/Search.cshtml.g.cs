#pragma checksum "D:\NetProjects\Mvc_Apteka\Views\ProductsSearch\Search.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c22b7eeecb71786c42bd43f9642d5d2560241e09"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ProductsSearch_Search), @"mvc.1.0.view", @"/Views/ProductsSearch/Search.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\NetProjects\Mvc_Apteka\Views\_ViewImports.cshtml"
using Mvc_Apteka;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\NetProjects\Mvc_Apteka\Views\_ViewImports.cshtml"
using Mvc_Apteka.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c22b7eeecb71786c42bd43f9642d5d2560241e09", @"/Views/ProductsSearch/Search.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3409a79fc3eba7cbb335e235f9af3aefb12acb32", @"/Views/_ViewImports.cshtml")]
    public class Views_ProductsSearch_Search : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<div id=\"Model\" style=\"display: none;\" >");
#nullable restore
#line 2 "D:\NetProjects\Mvc_Apteka\Views\ProductsSearch\Search.cshtml"
                                    Write(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</div>
<script>
    function $searchPage( uri ){
        const ctrl = {

            $global(){
                if( typeof(window['ctrl'])=='undefined'  ){
                    return window['ctrl']={                
                    };
                }else{
                     return window['ctrl'];
                }
            },

            /// парсинг содержимого элемента <div id=""Model""> ... </div>
            $model: function GetModel(){
                try{
                    if( !ctrl._model ){
                        ctrl._model=JSON.parse(Model.innerHTML);
                        Model.innerHTML = '';
                        Model.style.display = 'block';
                        return ctrl._model;
                    }else{
                        return ctrl._model;
                    }                    
                }catch(e){
                    alert('$getModel() Ошибка '+e);
                }
            },


            $createContentLayout(){
    ");
            WriteLiteral(@"            if( !ctrl._contentLayout ){
                    return ctrl._contentLayout = $contentLayout(Model);
                }else{
                    return ctrl._contentLayout;
                }
            },

            $createSearchOptions(){
                if( !ctrl._options ){
                    return ctrl._options=[];
                }else{
                    return ctrl._options;
                }
            },

            $updateSearchOptions(options){
                if( !options )
                    throw new Error('Аргумент options функции $updateSearchOptions(...) принимает недействительное значение');

                const current = ctrl.$createSearchOptions();
                while(current.length>0)
                    current.shift();
                while(options.length>0)
                    current.push(options.shift());
                ctrl.$createInputSearch().$updateSearchOptions(current);
            },

            $createInputSearch(){
       ");
            WriteLiteral(@"         const value = ctrl.$model().SearchQuery? ctrl.$model().SearchQuery: '';
                if( !ctrl._inputSearch ){
                    return ctrl._inputSearch = $inputSearch('поиск','searchInput',value,
                        ctrl.$createSearchOptions(), 
                        'console.log($global().$oninput({ name: event.target.name, value: event.target.value })); event.preventDefault();',
                        'console.log($global().$onsearch({ name: event.target.name, value: event.target.value })); event.preventDefault();');
                }else{
                    return ctrl._inputSearch;
                }                
            },

            $layoutInputSearch(){
                ctrl.$createContentLayout().$top(ctrl.$createInputSearch().pnode);
            },


            $layoutSearchFilters(){                
                const filters = ctrl.$createSearchFilters();
                ctrl.$createContentLayout().$left(filters.pnode);                
         ");
            WriteLiteral(@"   },

            $createSearchFilters(){
                if( !ctrl._searchFilters ){
                    
                    return ctrl._searchFilters=$searchFilters();
                }else{
                    return ctrl._searchFilters;
                }
            },

            $createSearchresults(){
                if( !ctrl._searchResults ){
                    return ctrl._searchResults = $searchResults();
                }else{
                    return ctrl._searchResults;
                }
            },

            $layoutSearchResults(){
                ctrl.$createContentLayout().$view(ctrl.$createSearchresults().pnode);
            },

            $updateSearchResults( searchModel ){
                const products = searchModel.SearchResults;
                ctrl._model = searchModel;                             
                ctrl.$createSearchresults().$update( (ctrl._model.SearchResults).map(function(product){
                    return {
              ");
            WriteLiteral(@"          title:      '',
                        subtitle:   product.ProductName,
                        text:       $table({ 'цена': product.ProductPrice, 'кол-во': product.ProductCount }),
                        ahref:      location.origin+'/Products/Info?Id='+product.ID,
                        atext:      'подробнее'
                    };
                }));
            },

            $init(){
                ctrl.$model();
                ctrl.$layoutInputSearch();
                ctrl.$layoutSearchFilters();
                ctrl.$layoutSearchResults();
                ctrl.$updateSearchResults(ctrl.$model());     
                ctrl.$updateSearchOptions([]);
            },

            $onerror( message ){
                alert(message);
            },
            
            $oninput( message ){
                if( !message )
                    throw new Error('Аргумент message фукнции oninput(..) не определён');
                if( !message.name )
                  ");
            WriteLiteral(@"  throw new Error('Аргумент message.name фукнции oninput(..) не определён');
                if( typeof(message.value)=='undefined' )
                    throw new Error('Аргумент message.value фукнции oninput(..) не определён');                
                console.log(`$oninput(${JSON.stringify(message)})`);
                switch(message.name){
                    case 'searchInput':
                        const location = `${uri}/OnInput`;
                        $http.$get(location,message).then(
                            (state)=>{
                                if( !state )
                                    throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state');    
                                if( !state.status )
                                    throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state.status');    
                                if( !state.headers )
             ");
            WriteLiteral(@"                       throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state.headers');    
                                console.log(state);
                                switch(state.status)
                                {
                                    case 200:
                                        if( !state.response )
                                            throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state.response');    
                                        if (!state.response.Options)
                                            throw new Error('В ответном сообщении нет ключа options ');
                                        ctrl.$updateSearchOptions(state.response.Options);
                                        console.log('Свойвса автоподстановки обнослены');
                                        break;
                                    case 500:
               ");
            WriteLiteral(@"                         break;
                                    default:
                                        ctrl.$onerror(state);
                                }
                                //const response = JSON.parse(response);

                            }, 
                            (err)=>{
                                ctrl.$onerror('Ошибка при обработки события oninput: '+err);
                            }
                        );
                        break;
                }                
                return message;
            },
            $onsearch( message ){
                if( !message )
                    throw new Error('Аргумент message фукнции oninput(..) не определён');
                if( !message.name )
                    throw new Error('Аргумент message.name фукнции oninput(..) не определён');
                if( typeof(message.value)=='undefined' )
                    throw new Error('Аргумент message.value фукнции oninput(..) не");
            WriteLiteral(@" определён');                
                console.log(`$oninput(${JSON.stringify(message)})`);
                switch(message.name){
                    case 'searchInput':
                        const location = `${uri}/OnSearch`;
                        const r = ctrl.$createSearchFilters().$values();
                        Object.assign(r,{searchInput: message.value});
                      
                        $http.$get(location,r).then(
                            (state)=>{
                                if( !state )
                                    throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state');    
                                if( !state.status )
                                    throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state.status');    
                                if( !state.headers )
                                    throw new Error('Обработчик за");
            WriteLiteral(@"проса '+location+' получил не дейтсвительное значение в аргументе state.headers');    
                                console.log(state);
                                switch(state.status)
                                {
                                    case 200:
                                        if( !state.response )
                                            throw new Error('Обработчик запроса '+location+' получил не дейтсвительное значение в аргументе state.response');    
                                        if (!state.response.SearchResults)
                                            throw new Error('В ответном сообщении нет ключа SearchResults ');
                                            console.log('Резульаты поиска',state.response);
                                        ctrl.$updateSearchResults(state.response);
                                        console.log('Резульаты поиска обновлены');
                                        break;
                         ");
            WriteLiteral(@"           case 500:
                                        break;
                                    default:
                                        ctrl.$onerror(state);
                                }
                                //const response = JSON.parse(response);

                            }, 
                            (err)=>{
                                ctrl.$onerror('Ошибка при обработки события oninput: '+err);
                            }
                        );
                        break;
                }                
                return message;
            }
        };
        
        Object.assign(ctrl.$global(), ctrl);
        ctrl.$init();

        
        function $searchFilters(){
            const pnode = document.createElement('div');        


            const ctrl = {
              

                $get(){
                    if( !ctrl.priceRangeCtrl )
                        throw new Error('ctrl.priceRangeCtrl не опр");
            WriteLiteral(@"еделён');
                    if( !ctrl.priceRangeCtrl.$getMinValue )
                        throw new Error('ctrl.priceRangeCtrl.$getMinValue не определён');
                    return `price in ${ctrl.priceRangeCtrl.$getRange()} && count in ${ctrl.countRangeCtrl.$getRange()}`;
                    //return ctrl.priceRangeCtrl.$getMinValue() + ',' + ctrl.priceRangeCtrl.$getMaxValue();
                }
            };
            pnode.appendChild($title('Параметры поиска'));
            const priceRangeCtrl = ctrl.priceRangeCtrl = $inputRange('Цена',     'number', 'price', 0, 1000000, 'цена', function validate(){} );                
            const countRangeCtrl = ctrl.countRangeCtrl = $inputRange('Кол-во',   'number', 'count', 0, 1000000, 'кол-во', function validate(){} );                    
            priceRangeCtrl.$layout(pnode);        
            countRangeCtrl.$layout(pnode);
            pnode.appendChild($button('применить',function(){                
                $global().$ons");
            WriteLiteral(@"earch( {name: 'searchInput', value: document.getElementById('searchInput').value});
            }));
            ctrl.$values = function(){
                const filters = {minPrice: 0, maxPrice: 100000000,minCount: 0, maxCount: 100000000};
                try{
                                    const priceNumbersInText = priceRangeCtrl.$getRange().replace('[','').replace(']','').split(',');
                    const p1=parseFloat(priceNumbersInText[0]);
                    const p2=parseFloat(priceNumbersInText[1]);
                    filters.minPrice=Math.min(p1,p2);
                    filters.maxPrice=Math.max(p1,p2);
                    const countsNumbersInText = countRangeCtrl.$getRange().replace('[','').replace(']','').split(',');
                    const c1=parseFloat(countsNumbersInText[0]);
                    const c2=parseFloat(countsNumbersInText[1]);
                    filters.minCount=Math.min(c1,c2);
                    filters.maxCount=Math.max(c1,c2);
                }cat");
            WriteLiteral(@"ch(e){
                    console.error(e);
                }
                return filters;
            }
            ctrl.pnode = pnode;            
            return ctrl;
        }
    }
</script>
<script>
    const searchPage = $searchPage('/ProductsSearch');
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
